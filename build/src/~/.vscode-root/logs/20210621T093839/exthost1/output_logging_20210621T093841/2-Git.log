다음에서 git을 찾는 중: git
git에서 git 2.17.1을(를) 사용하는 중
Opening repository for path='/home/kist/wheel' failed; ex=Failed to execute git {
  "exitCode": 128,
  "gitCommand": "rev-parse",
  "stdout": "",
  "stderr": "fatal: (현재 폴더 또는 상위 폴더 중 일부가) 깃 저장소가 아닙니다: .git\n"
}
Opening repository for path='/home/kist/wheel/src' failed; ex=Failed to execute git {
  "exitCode": 128,
  "gitCommand": "rev-parse",
  "stdout": "",
  "stderr": "fatal: (현재 폴더 또는 상위 폴더 중 일부가) 깃 저장소가 아닙니다: .git\n"
}
Opening repository for path='/home/kist/wheel/.vscode' failed; ex=Failed to execute git {
  "exitCode": 128,
  "gitCommand": "rev-parse",
  "stdout": "",
  "stderr": "fatal: (현재 폴더 또는 상위 폴더 중 일부가) 깃 저장소가 아닙니다: .git\n"
}
Opening repository for path='/home/kist/wheel/CMakeLists.txt' failed; ex=Error: spawn ENOTDIR
Opening repository for path='/home/kist/wheel/build' failed; ex=Failed to execute git {
  "exitCode": 128,
  "gitCommand": "rev-parse",
  "stdout": "",
  "stderr": "fatal: (현재 폴더 또는 상위 폴더 중 일부가) 깃 저장소가 아닙니다: .git\n"
}
Opening repository for path='/home/kist/wheel/include' failed; ex=Failed to execute git {
  "exitCode": 128,
  "gitCommand": "rev-parse",
  "stdout": "",
  "stderr": "fatal: (현재 폴더 또는 상위 폴더 중 일부가) 깃 저장소가 아닙니다: .git\n"
}
Opening repository for path='/home/kist/wheel/src' failed; ex=Failed to execute git {
  "exitCode": 128,
  "gitCommand": "rev-parse",
  "stdout": "",
  "stderr": "fatal: (현재 폴더 또는 상위 폴더 중 일부가) 깃 저장소가 아닙니다: .git\n"
}
Opening repository for path='/home/kist/wheel/~' failed; ex=Failed to execute git {
  "exitCode": 128,
  "gitCommand": "rev-parse",
  "stdout": "",
  "stderr": "fatal: (현재 폴더 또는 상위 폴더 중 일부가) 깃 저장소가 아닙니다: .git\n"
}
Opening repository for path='/home/kist/wheel/src' failed; ex=Failed to execute git {
  "exitCode": 128,
  "gitCommand": "rev-parse",
  "stdout": "",
  "stderr": "fatal: (현재 폴더 또는 상위 폴더 중 일부가) 깃 저장소가 아닙니다: .git\n"
}
Opening repository for path='/home/kist/wheel/src' failed; ex=Failed to execute git {
  "exitCode": 128,
  "gitCommand": "rev-parse",
  "stdout": "",
  "stderr": "fatal: (현재 폴더 또는 상위 폴더 중 일부가) 깃 저장소가 아닙니다: .git\n"
}
Opening repository for path='/home/kist/wheel/src' failed; ex=Failed to execute git {
  "exitCode": 128,
  "gitCommand": "rev-parse",
  "stdout": "",
  "stderr": "fatal: (현재 폴더 또는 상위 폴더 중 일부가) 깃 저장소가 아닙니다: .git\n"
}
Opening repository for path='/home/kist/wheel/src' failed; ex=Failed to execute git {
  "exitCode": 128,
  "gitCommand": "rev-parse",
  "stdout": "",
  "stderr": "fatal: (현재 폴더 또는 상위 폴더 중 일부가) 깃 저장소가 아닙니다: .git\n"
}
Opening repository for path='/home/kist/wheel/src' failed; ex=Failed to execute git {
  "exitCode": 128,
  "gitCommand": "rev-parse",
  "stdout": "",
  "stderr": "fatal: (현재 폴더 또는 상위 폴더 중 일부가) 깃 저장소가 아닙니다: .git\n"
}
Opening repository for path='/home/kist/wheel/src' failed; ex=Failed to execute git {
  "exitCode": 128,
  "gitCommand": "rev-parse",
  "stdout": "",
  "stderr": "fatal: (현재 폴더 또는 상위 폴더 중 일부가) 깃 저장소가 아닙니다: .git\n"
}
Opening repository for path='/home/kist/wheel/src' failed; ex=Failed to execute git {
  "exitCode": 128,
  "gitCommand": "rev-parse",
  "stdout": "",
  "stderr": "fatal: (현재 폴더 또는 상위 폴더 중 일부가) 깃 저장소가 아닙니다: .git\n"
}
Opening repository for path='/home/kist/wheel/src' failed; ex=Failed to execute git {
  "exitCode": 128,
  "gitCommand": "rev-parse",
  "stdout": "",
  "stderr": "fatal: (현재 폴더 또는 상위 폴더 중 일부가) 깃 저장소가 아닙니다: .git\n"
}
Opening repository for path='/home/kist/wheel/src' failed; ex=Failed to execute git {
  "exitCode": 128,
  "gitCommand": "rev-parse",
  "stdout": "",
  "stderr": "fatal: (현재 폴더 또는 상위 폴더 중 일부가) 깃 저장소가 아닙니다: .git\n"
}
Opening repository for path='/home/kist/wheel/src' failed; ex=Failed to execute git {
  "exitCode": 128,
  "gitCommand": "rev-parse",
  "stdout": "",
  "stderr": "fatal: (현재 폴더 또는 상위 폴더 중 일부가) 깃 저장소가 아닙니다: .git\n"
}
> git rev-parse --git-dir
Open repository: /home/kist/wheel
> git status -z -u
> git symbolic-ref --short HEAD
> git for-each-ref --format=%(refname)%00%(upstream:short)%00%(objectname)%00%(upstream:track) refs/heads/master refs/remotes/master
> git for-each-ref --sort -committerdate --format %(refname) %(objectname) %(*objectname)
> git remote --verbose
> git config --get commit.template
> git show --textconv :src/Communication.cpp
> git ls-files --stage -- /home/kist/wheel/src/Communication.cpp
> git check-ignore -v -z --stdin
